---
interface Props { steps: string[]; center?: string }
const { steps, center = '循環設計' } = Astro.props as Props;
const size = 360;
const cx = size / 2;
const cy = size / 2;
const R = 120;
const nodes = steps.map((s, i) => {
  const ang = (360 / steps.length) * i - 90; // start from top
  const rad = (Math.PI / 180) * ang;
  return {
    i,
    s,
    x: cx + R * Math.cos(rad),
    y: cy + R * Math.sin(rad),
  };
});
---
<div class="cycle-wrap">
  <div class="cycle-svg">
    <svg viewBox={`0 0 ${size} ${size}`} width="100%" height="100%" role="img" aria-label="{center}">
      <defs>
        <linearGradient id="ringGrad" x1="0" y1="0" x2="1" y2="1">
          <stop offset="0%" stop-color="#00ffc2" stop-opacity="0.35"/>
          <stop offset="100%" stop-color="#00e0ff" stop-opacity="0.35"/>
        </linearGradient>
        <radialGradient id="coreBg">
          <stop offset="0%" stop-color="#103429" stop-opacity=".9"/>
          <stop offset="100%" stop-color="#0b241c" stop-opacity=".7"/>
        </radialGradient>
        <filter id="softGlow" x="-40%" y="-40%" width="180%" height="180%">
          <feGaussianBlur stdDeviation="6" result="b"/>
          <feMerge>
            <feMergeNode in="b"/>
            <feMergeNode in="SourceGraphic"/>
          </feMerge>
        </filter>
        <linearGradient id="badgeGrad" x1="0" y1="0" x2="0" y2="1">
          <stop offset="0%" stop-color="#3aff86"/>
          <stop offset="100%" stop-color="#00e0ff"/>
        </linearGradient>
      </defs>

      <!-- ring background -->
      <circle cx={cx} cy={cy} r={R+18} fill="url(#coreBg)" opacity=".7" />
      <circle cx={cx} cy={cy} r={R} fill="none" stroke="url(#ringGrad)" stroke-width="12" stroke-dasharray="4 14" filter="url(#softGlow)" />

      <!-- badges -->
      {nodes.map(n => (
        <g transform={`translate(${n.x}, ${n.y})`}>
          <circle r="16" fill="url(#badgeGrad)" filter="url(#softGlow)" />
          <text text-anchor="middle" dominant-baseline="central" font-size="12" font-weight="800" fill="#042315">{n.i+1}</text>
        </g>
      ))}

      <!-- center label -->
      <g>
        <circle cx={cx} cy={cy} r="36" fill="#0f2a22" stroke="#184c3d" stroke-width="1" />
        <text x={cx} y={cy-6} text-anchor="middle" font-size="12" fill="#a7c9bb">{center}</text>
        <text x={cx} y={cy+10} text-anchor="middle" font-size="10" fill="#86b8a6">IEO→拠点→計測→記録→NFT→再投資</text>
      </g>
    </svg>
  </div>

  <ol class="cycle-list">
    {steps.map((s, i) => (
      <li>
        <span class="n">{i+1}</span>
        <span class="t">{s}</span>
      </li>
    ))}
  </ol>
</div>

<style is:global>
.cycle-wrap{ display:grid; grid-template-columns: 1fr; gap:18px }
@media (min-width: 900px){ .cycle-wrap{ grid-template-columns: 380px 1fr; align-items:center } }

.cycle-svg{ width:min(380px, 90vw); margin:auto }

.cycle-list{ margin:0; padding:0; }
.cycle-list li{ list-style:none; display:flex; gap:12px; align-items:flex-start; padding:12px 0; border-bottom:1px solid var(--outline) }
.cycle-list .n{ display:inline-grid; place-items:center; min-width:28px; height:28px; border-radius:999px; background: linear-gradient(180deg, var(--accent), var(--accent-2)); color:#042315; font-weight:800; font-size:12px; box-shadow: 0 6px 18px #00ffab33 }
.cycle-list .t{ flex:1; line-height:1.55 }

@media (max-width: 899px){
  .cycle-svg{ display:none }
}
</style>
